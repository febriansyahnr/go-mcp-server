// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks_gcs

import (
	context "context"
	io "io"

	gcs "github.com/paper-indonesia/pg-mcp-server/pkg/gcs"

	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"

	storage "cloud.google.com/go/storage"

	time "time"
)

// GCSService is an autogenerated mock type for the GCSService type
type GCSService struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *GCSService) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSignedURL provides a mock function with given fields: ctx, object, expires
func (_m *GCSService) CreateSignedURL(ctx context.Context, object string, expires time.Duration) (string, error) {
	ret := _m.Called(ctx, object, expires)

	if len(ret) == 0 {
		panic("no return value specified for CreateSignedURL")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) (string, error)); ok {
		return rf(ctx, object, expires)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) string); ok {
		r0 = rf(ctx, object, expires)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Duration) error); ok {
		r1 = rf(ctx, object, expires)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadAll provides a mock function with given fields: ctx, bucket, object
func (_m *GCSService) ReadAll(ctx context.Context, bucket string, object string) ([]byte, error) {
	ret := _m.Called(ctx, bucket, object)

	if len(ret) == 0 {
		panic("no return value specified for ReadAll")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]byte, error)); ok {
		return rf(ctx, bucket, object)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, bucket, object)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucket, object)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetBucketWriter provides a mock function with given fields: ctx, objectName
func (_m *GCSService) SetBucketWriter(ctx context.Context, objectName string) (*storage.Writer, error) {
	ret := _m.Called(ctx, objectName)

	if len(ret) == 0 {
		panic("no return value specified for SetBucketWriter")
	}

	var r0 *storage.Writer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*storage.Writer, error)); ok {
		return rf(ctx, objectName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *storage.Writer); ok {
		r0 = rf(ctx, objectName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Writer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, objectName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetClient provides a mock function with given fields: ctx
func (_m *GCSService) SetClient(ctx context.Context) (*storage.Client, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SetClient")
	}

	var r0 *storage.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*storage.Client, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *storage.Client); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storage.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadFile provides a mock function with given fields: ctx, objectName, src, sync
func (_m *GCSService) UploadFile(ctx context.Context, objectName string, src io.Reader, sync bool) (*gcs.UploadMultipart, error) {
	ret := _m.Called(ctx, objectName, src, sync)

	if len(ret) == 0 {
		panic("no return value specified for UploadFile")
	}

	var r0 *gcs.UploadMultipart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, bool) (*gcs.UploadMultipart, error)); ok {
		return rf(ctx, objectName, src, sync)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, io.Reader, bool) *gcs.UploadMultipart); ok {
		r0 = rf(ctx, objectName, src, sync)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gcs.UploadMultipart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, io.Reader, bool) error); ok {
		r1 = rf(ctx, objectName, src, sync)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadFileFromMultipart provides a mock function with given fields: ctx, objectName, file, sync
func (_m *GCSService) UploadFileFromMultipart(ctx context.Context, objectName string, file *multipart.FileHeader, sync bool) (*gcs.UploadMultipart, error) {
	ret := _m.Called(ctx, objectName, file, sync)

	if len(ret) == 0 {
		panic("no return value specified for UploadFileFromMultipart")
	}

	var r0 *gcs.UploadMultipart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *multipart.FileHeader, bool) (*gcs.UploadMultipart, error)); ok {
		return rf(ctx, objectName, file, sync)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *multipart.FileHeader, bool) *gcs.UploadMultipart); ok {
		r0 = rf(ctx, objectName, file, sync)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gcs.UploadMultipart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *multipart.FileHeader, bool) error); ok {
		r1 = rf(ctx, objectName, file, sync)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadFileToGCS provides a mock function with given fields: ctx, objectName, srcFile, sync, ttl
func (_m *GCSService) UploadFileToGCS(ctx context.Context, objectName string, srcFile string, sync bool, ttl *time.Duration) (*gcs.Response, error) {
	ret := _m.Called(ctx, objectName, srcFile, sync, ttl)

	if len(ret) == 0 {
		panic("no return value specified for UploadFileToGCS")
	}

	var r0 *gcs.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, *time.Duration) (*gcs.Response, error)); ok {
		return rf(ctx, objectName, srcFile, sync, ttl)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, *time.Duration) *gcs.Response); ok {
		r0 = rf(ctx, objectName, srcFile, sync, ttl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gcs.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, bool, *time.Duration) error); ok {
		r1 = rf(ctx, objectName, srcFile, sync, ttl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGCSService creates a new instance of GCSService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGCSService(t interface {
	mock.TestingT
	Cleanup(func())
}) *GCSService {
	mock := &GCSService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
