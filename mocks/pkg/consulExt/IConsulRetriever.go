// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks_consulExt

import (
	context "context"
	log "log"

	mock "github.com/stretchr/testify/mock"
)

// IConsulRetriever is an autogenerated mock type for the IConsulRetriever type
type IConsulRetriever struct {
	mock.Mock
}

// Init provides a mock function with given fields: ctx, logger
func (_m *IConsulRetriever) Init(ctx context.Context, logger *log.Logger) error {
	ret := _m.Called(ctx, logger)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *log.Logger) error); ok {
		r0 = rf(ctx, logger)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Retrieve provides a mock function with given fields: ctx
func (_m *IConsulRetriever) Retrieve(ctx context.Context) ([]byte, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Retrieve")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]byte, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []byte); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Shutdown provides a mock function with given fields: ctx
func (_m *IConsulRetriever) Shutdown(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Status provides a mock function with no fields
func (_m *IConsulRetriever) Status() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewIConsulRetriever creates a new instance of IConsulRetriever. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIConsulRetriever(t interface {
	mock.TestingT
	Cleanup(func())
}) *IConsulRetriever {
	mock := &IConsulRetriever{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
