// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks_mySqlExt

import (
	context "context"

	mySqlExt "github.com/paper-indonesia/pg-mcp-server/pkg/mySqlExt"
	mock "github.com/stretchr/testify/mock"

	sqlx "github.com/jmoiron/sqlx"

	time "time"

	trace "go.opentelemetry.io/otel/trace"

	v2mySqlExt "github.com/paper-indonesia/pdk/v2/mySqlExt"
)

// IMySqlExt is an autogenerated mock type for the IMySqlExt type
type IMySqlExt struct {
	mock.Mock
}

// BeginTxx provides a mock function with given fields: ctx
func (_m *IMySqlExt) BeginTxx(ctx context.Context) (context.Context, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for BeginTxx")
	}

	var r0 context.Context
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (context.Context, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with no fields
func (_m *IMySqlExt) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields: ctx
func (_m *IMySqlExt) Commit(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Commit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DBName provides a mock function with no fields
func (_m *IMySqlExt) DBName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DBName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ExecContext provides a mock function with given fields: ctx, query, args
func (_m *IMySqlExt) ExecContext(ctx context.Context, query string, args ...interface{}) (bool, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecContext")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (bool, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) bool); ok {
		r0 = rf(ctx, query, args...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecTx provides a mock function with given fields: ctx, fn
func (_m *IMySqlExt) ExecTx(ctx context.Context, fn func(mySqlExt.IMySqlExt) error) error {
	ret := _m.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for ExecTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(mySqlExt.IMySqlExt) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetContext provides a mock function with given fields: ctx, dest, query, args
func (_m *IMySqlExt) GetContext(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, dest, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) error); ok {
		r0 = rf(ctx, dest, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSchema provides a mock function with no fields
func (_m *IMySqlExt) GetSchema() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSchema")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetTx provides a mock function with given fields: ctx
func (_m *IMySqlExt) GetTx(ctx context.Context) *sqlx.Tx {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTx")
	}

	var r0 *sqlx.Tx
	if rf, ok := ret.Get(0).(func(context.Context) *sqlx.Tx); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.Tx)
		}
	}

	return r0
}

// InstrumentMetric provides a mock function with given fields: ctx, query, tableName, duration
func (_m *IMySqlExt) InstrumentMetric(ctx context.Context, query string, tableName string, duration *time.Duration) {
	_m.Called(ctx, query, tableName, duration)
}

// MasterDBClient provides a mock function with no fields
func (_m *IMySqlExt) MasterDBClient() *sqlx.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for MasterDBClient")
	}

	var r0 *sqlx.DB
	if rf, ok := ret.Get(0).(func() *sqlx.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.DB)
		}
	}

	return r0
}

// NamedExecContext provides a mock function with given fields: ctx, query, args
func (_m *IMySqlExt) NamedExecContext(ctx context.Context, query string, args ...interface{}) (bool, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NamedExecContext")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (bool, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) bool); ok {
		r0 = rf(ctx, query, args...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OtelTracer provides a mock function with no fields
func (_m *IMySqlExt) OtelTracer() trace.Tracer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OtelTracer")
	}

	var r0 trace.Tracer
	if rf, ok := ret.Get(0).(func() trace.Tracer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.Tracer)
		}
	}

	return r0
}

// Ping provides a mock function with no fields
func (_m *IMySqlExt) Ping() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QueryContext provides a mock function with given fields: ctx, query, args
func (_m *IMySqlExt) QueryContext(ctx context.Context, query string, args ...interface{}) (v2mySqlExt.IMySqlRows, error) {
	var _ca []interface{}
	_ca = append(_ca, ctx, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryContext")
	}

	var r0 v2mySqlExt.IMySqlRows
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) (v2mySqlExt.IMySqlRows, error)); ok {
		return rf(ctx, query, args...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) v2mySqlExt.IMySqlRows); ok {
		r0 = rf(ctx, query, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v2mySqlExt.IMySqlRows)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, ...interface{}) error); ok {
		r1 = rf(ctx, query, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Rollback provides a mock function with given fields: ctx
func (_m *IMySqlExt) Rollback(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Rollback")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SelectContext provides a mock function with given fields: ctx, dest, query, args
func (_m *IMySqlExt) SelectContext(ctx context.Context, dest interface{}, query string, args ...interface{}) error {
	var _ca []interface{}
	_ca = append(_ca, ctx, dest, query)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SelectContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, string, ...interface{}) error); ok {
		r0 = rf(ctx, dest, query, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SlaveDBClient provides a mock function with no fields
func (_m *IMySqlExt) SlaveDBClient() *sqlx.DB {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for SlaveDBClient")
	}

	var r0 *sqlx.DB
	if rf, ok := ret.Get(0).(func() *sqlx.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sqlx.DB)
		}
	}

	return r0
}

// TableName provides a mock function with given fields: ctx
func (_m *IMySqlExt) TableName(ctx context.Context) string {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for TableName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewIMySqlExt creates a new instance of IMySqlExt. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMySqlExt(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMySqlExt {
	mock := &IMySqlExt{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
