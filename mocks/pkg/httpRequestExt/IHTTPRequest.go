// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks_httpRequestExt

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IHTTPRequest is an autogenerated mock type for the IHTTPRequest type
type IHTTPRequest struct {
	mock.Mock
}

// GET provides a mock function with given fields: ctx, uri, header
func (_m *IHTTPRequest) GET(ctx context.Context, uri string, header map[string]string) ([]byte, int, error) {
	ret := _m.Called(ctx, uri, header)

	if len(ret) == 0 {
		panic("no return value specified for GET")
	}

	var r0 []byte
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) ([]byte, int, error)); ok {
		return rf(ctx, uri, header)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) []byte); ok {
		r0 = rf(ctx, uri, header)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string) int); ok {
		r1 = rf(ctx, uri, header)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, map[string]string) error); ok {
		r2 = rf(ctx, uri, header)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// POST provides a mock function with given fields: ctx, uri, data, header
func (_m *IHTTPRequest) POST(ctx context.Context, uri string, data interface{}, header map[string]string) ([]byte, int, error) {
	ret := _m.Called(ctx, uri, data, header)

	if len(ret) == 0 {
		panic("no return value specified for POST")
	}

	var r0 []byte
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, map[string]string) ([]byte, int, error)); ok {
		return rf(ctx, uri, data, header)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, map[string]string) []byte); ok {
		r0 = rf(ctx, uri, data, header)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, map[string]string) int); ok {
		r1 = rf(ctx, uri, data, header)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, interface{}, map[string]string) error); ok {
		r2 = rf(ctx, uri, data, header)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewIHTTPRequest creates a new instance of IHTTPRequest. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIHTTPRequest(t interface {
	mock.TestingT
	Cleanup(func())
}) *IHTTPRequest {
	mock := &IHTTPRequest{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
