// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks_util

import (
	rsa "crypto/rsa"

	mock "github.com/stretchr/testify/mock"
)

// SecretReader is an autogenerated mock type for the SecretReader type
type SecretReader struct {
	mock.Mock
}

// GetPgpPrivateKey provides a mock function with no fields
func (_m *SecretReader) GetPgpPrivateKey() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPgpPrivateKey")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPgpPublicKey provides a mock function with no fields
func (_m *SecretReader) GetPgpPublicKey() ([]byte, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPgpPublicKey")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]byte, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrivateKey provides a mock function with no fields
func (_m *SecretReader) GetPrivateKey() (*rsa.PrivateKey, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPrivateKey")
	}

	var r0 *rsa.PrivateKey
	var r1 error
	if rf, ok := ret.Get(0).(func() (*rsa.PrivateKey, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *rsa.PrivateKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rsa.PrivateKey)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublicKey provides a mock function with no fields
func (_m *SecretReader) GetPublicKey() (*rsa.PublicKey, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetPublicKey")
	}

	var r0 *rsa.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func() (*rsa.PublicKey, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *rsa.PublicKey); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rsa.PublicKey)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSecretReader creates a new instance of SecretReader. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSecretReader(t interface {
	mock.TestingT
	Cleanup(func())
}) *SecretReader {
	mock := &SecretReader{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
